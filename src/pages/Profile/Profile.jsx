import { useEffect, useState, useMemo } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import {
    fetchUserTasksRequest,
    deleteUserTaskRequest
} from '../../redux/actions/profileActions.js';
import FullScreenToolContainer from "../../layouts/FullScreenToolContainer/FullScreenToolContainer.jsx";
import TaskCard from "../../components/TaskCard/TaskCard.jsx";
import TaskGroup from "../../components/TaskGroup/TaskGroup.jsx";
import Button from "../../components/Button/Button.jsx";
import styles from './Profile.module.css';

export const Profile = () => {
    const dispatch = useDispatch();
    const [filter, setFilter] = useState('all');
    const [viewMode, setViewMode] = useState('table'); // 'table' or 'cards' or 'groups'
    const [expandedGroups, setExpandedGroups] = useState({});

    const {
        userTasks = [],
        taskStatistics = { total: 0, completed: 0, pending: 0 },
        isLoadingTasks = false,
        tasksError = null
    } = useSelector(state => state.profile || {});

    const { user } = useSelector(state => state.auth);

    // Load tasks on component mount
    useEffect(() => {
        dispatch(fetchUserTasksRequest());
    }, [dispatch]);

    // Memoized filtered and sorted tasks
    const filteredTasks = useMemo(() => {
        return userTasks
            .filter(task => {
                switch (filter) {
                    case 'completed':
                        return task.status === true;
                    case 'pending':
                        return task.status === false;
                    case 'all':
                    default:
                        return true;
                }
            })
            .sort((a, b) => {
                // Sort by created_at or ID (newer first)
                if (a.created_at && b.created_at) {
                    return new Date(b.created_at) - new Date(a.created_at);
                }
                return b.id - a.id;
            });
    }, [userTasks, filter]);

    // Group tasks by type for group view
    const groupedTasks = useMemo(() => {
        const groups = {};
        filteredTasks.forEach(task => {
            const groupName = task.group_name || task.type || '–û–±—â–∏–µ –∑–∞–¥–∞—á–∏';
            if (!groups[groupName]) {
                groups[groupName] = [];
            }
            groups[groupName].push(task);
        });
        return groups;
    }, [filteredTasks]);

    // Statistics from Redux or computed from tasks
    const stats = useMemo(() => {
        const total = userTasks.length;
        const completed = userTasks.filter(task => task.status === true).length;
        const pending = total - completed;

        return {
            total: taskStatistics.total || total,
            completed: taskStatistics.completed || completed,
            pending: taskStatistics.pending || pending
        };
    }, [userTasks, taskStatistics]);

    const handleDeleteTask = (taskId) => {
        if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?')) {
            dispatch(deleteUserTaskRequest(taskId));
        }
    };

    const handleRefresh = () => {
        dispatch(fetchUserTasksRequest());
    };

    const handleFilterChange = (newFilter) => {
        setFilter(newFilter);
    };

    const handleViewModeChange = (mode) => {
        setViewMode(mode);
    };

    const toggleGroup = (groupName) => {
        setExpandedGroups(prev => ({
            ...prev,
            [groupName]: !prev[groupName]
        }));
    };

    if (isLoadingTasks) {
        return (
            <FullScreenToolContainer name="–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è">
                <div className={styles.profileContainer}>
                    <div className={styles.loadingState}>
                        <div className={styles.loadingSpinner} />
                        <h3>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á...</h3>
                        <p>–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ</p>
                    </div>
                </div>
            </FullScreenToolContainer>
        );
    }

    if (tasksError) {
        return (
            <FullScreenToolContainer name="–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è">
                <div className={styles.profileContainer}>
                    <div className={styles.errorState}>
                        <div className={styles.errorIcon}>‚ùå</div>
                        <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
                        <p>{tasksError}</p>
                        <Button onClick={handleRefresh} variant="primary">
                            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                        </Button>
                    </div>
                </div>
            </FullScreenToolContainer>
        );
    }

    return (
        <FullScreenToolContainer name="–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è">
            <div className={styles.profileContainer}>
                {/* Header */}
                <div className={styles.profileHeader}>
                    <div className={styles.headerInfo}>
                        <h2 className={styles.profileTitle}>
                            –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user?.displayName || user?.login || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}!
                        </h2>
                        <p className={styles.profileSubtitle}>–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–∏–º–∏ –∑–∞–¥–∞—á–∞–º–∏</p>
                    </div>
                    <Button
                        onClick={handleRefresh}
                        variant="secondary"
                        icon="üîÑ"
                        disabled={isLoadingTasks}
                    >
                        –û–±–Ω–æ–≤–∏—Ç—å
                    </Button>
                </div>

                {/* Statistics */}
                <div className={styles.statsContainer}>
                    <div className={styles.statCard}>
                        <div className={styles.statIcon}>üìù</div>
                        <div className={styles.statInfo}>
                            <span className={styles.statNumber}>{stats.total}</span>
                            <span className={styles.statLabel}>–í—Å–µ–≥–æ –∑–∞–¥–∞—á</span>
                        </div>
                    </div>
                    <div className={styles.statCard}>
                        <div className={styles.statIcon}>‚úÖ</div>
                        <div className={styles.statInfo}>
                            <span className={styles.statNumber}>{stats.completed}</span>
                            <span className={styles.statLabel}>–ó–∞–≤–µ—Ä—à–µ–Ω–æ</span>
                        </div>
                    </div>
                    <div className={styles.statCard}>
                        <div className={styles.statIcon}>‚è≥</div>
                        <div className={styles.statInfo}>
                            <span className={styles.statNumber}>{stats.pending}</span>
                            <span className={styles.statLabel}>–í –ø—Ä–æ—Ü–µ—Å—Å–µ</span>
                        </div>
                    </div>
                </div>

                {/* Controls */}
                <div className={styles.controlsContainer}>
                    {/* Filters */}
                    <div className={styles.filterContainer}>
                        <div className={styles.filterButtons}>
                            {[
                                { key: 'all', label: `–í—Å–µ (${stats.total})` },
                                { key: 'completed', label: `–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ (${stats.completed})` },
                                { key: 'pending', label: `–í –ø—Ä–æ—Ü–µ—Å—Å–µ (${stats.pending})` }
                            ].map(({ key, label }) => (
                                <button
                                    key={key}
                                    className={`${styles.filterButton} ${filter === key ? styles.active : ''}`}
                                    onClick={() => handleFilterChange(key)}
                                >
                                    {label}
                                </button>
                            ))}
                        </div>
                    </div>

                    {/* View Mode Selector */}
                    <div className={styles.viewModeContainer}>
                        <div className={styles.viewModeButtons}>
                            {[
                                { key: 'table', label: 'üìã', title: '–¢–∞–±–ª–∏—Ü–∞' },
                                { key: 'cards', label: 'üéØ', title: '–ö–∞—Ä—Ç–æ—á–∫–∏' },
                                { key: 'groups', label: 'üìÅ', title: '–ì—Ä—É–ø–ø—ã' }
                            ].map(({ key, label, title }) => (
                                <button
                                    key={key}
                                    className={`${styles.viewModeButton} ${viewMode === key ? styles.active : ''}`}
                                    onClick={() => handleViewModeChange(key)}
                                    title={title}
                                >
                                    {label}
                                </button>
                            ))}
                        </div>
                    </div>
                </div>

                {/* Tasks Content */}
                <div className={styles.tasksContainer}>
                    {filteredTasks.length === 0 ? (
                        <div className={styles.emptyState}>
                            <div className={styles.emptyIcon}>üì≠</div>
                            <h3>–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</h3>
                            <p>
                                {userTasks.length === 0
                                    ? '–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞–¥–∞—á'
                                    : '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä'
                                }
                            </p>
                        </div>
                    ) : (
                        <>
                            {viewMode === 'table' && (
                                <div className={styles.tableContainer}>
                                    <table className={styles.tasksTable}>
                                        <thead>
                                        <tr>
                                            <th>ID</th>
                                            <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                                            <th>–û–ø–∏—Å–∞–Ω–∏–µ</th>
                                            <th>–°—Ç–∞—Ç—É—Å</th>
                                            <th>–í—Ä–µ–º—è (–º–∏–Ω)</th>
                                            <th>–§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞</th>
                                            <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                                        </tr>
                                        </thead>
                                        <tbody>
                                        {filteredTasks.map(task => (
                                            <tr key={task.id} className={styles.tableRow}>
                                                <td className={styles.idCell}>#{task.id}</td>
                                                <td className={styles.nameCell}>
                                                    {task.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}
                                                </td>
                                                <td className={styles.descriptionCell}>
                                                    {task.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}
                                                </td>
                                                <td className={styles.statusCell}>
                                                        <span className={`${styles.statusBadge} ${task.status ? styles.statusCompleted : styles.statusPending}`}>
                                                            {task.status ? '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ' : '‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ'}
                                                        </span>
                                                </td>
                                                <td className={styles.timeCell}>
                                                    {task.estimated_time || 0}
                                                </td>
                                                <td className={styles.fileCell}>
                                                    {task.status && task.doc_path ? (
                                                        <a
                                                            href={task.doc_path}
                                                            target="_blank"
                                                            rel="noopener noreferrer"
                                                            className={styles.downloadLink}
                                                        >
                                                            üìÑ –°–∫–∞—á–∞—Ç—å
                                                        </a>
                                                    ) : (
                                                        <span className={styles.noFile}>‚Äî</span>
                                                    )}
                                                </td>
                                                <td className={styles.actionsCell}>
                                                    <button
                                                        onClick={() => handleDeleteTask(task.id)}
                                                        className={styles.deleteButton}
                                                        title="–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"
                                                    >
                                                        üóëÔ∏è
                                                    </button>
                                                </td>
                                            </tr>
                                        ))}
                                        </tbody>
                                    </table>
                                </div>
                            )}

                            {viewMode === 'cards' && (
                                <div className={styles.cardsContainer}>
                                    {filteredTasks.map(task => (
                                        <TaskCard
                                            key={task.id}
                                            task={task}
                                            onDelete={() => handleDeleteTask(task.id)}
                                        />
                                    ))}
                                </div>
                            )}

                            {viewMode === 'groups' && (
                                <div className={styles.groupsContainer}>
                                    {Object.entries(groupedTasks).map(([groupName, tasks]) => (
                                        <TaskGroup
                                            key={groupName}
                                            groupName={groupName}
                                            tasks={tasks}
                                            isExpanded={expandedGroups[groupName] !== false}
                                            onToggle={() => toggleGroup(groupName)}
                                            onDeleteTask={handleDeleteTask}
                                        />
                                    ))}
                                </div>
                            )}
                        </>
                    )}
                </div>

                {/* Footer Info */}
                {filteredTasks.length > 0 && (
                    <div className={styles.footerInfo}>
                        <small>
                            –ü–æ–∫–∞–∑–∞–Ω–æ {filteredTasks.length} –∏–∑ {stats.total} –∑–∞–¥–∞—á
                        </small>
                    </div>
                )}
            </div>
        </FullScreenToolContainer>
    );
};