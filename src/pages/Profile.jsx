import {useEffect, useState} from 'react';
import {useDispatch, useSelector} from 'react-redux';


import {deleteUserTaskRequest, fetchUserTasksRequest} from '../redux/actions/profileActions.js';
import styles from './Profile.module.css';
import FullScreenToolContainer from "../layouts/FullScreenToolContainer/FullScreenToolContainer.jsx";

export const Profile = () => {
    const dispatch = useDispatch();
    const [filter, setFilter] = useState('all'); // all, completed, pending

    console.log('Profile component rendering...');

    // –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è store
    const storeState = useSelector(store => store);
    console.log('Full store state:', storeState);

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ profile –≤ store
    if (!storeState.profile) {
        console.error('Profile state not found in store!');
        console.log('Available store keys:', Object.keys(storeState));
        return (
            <FullScreenToolContainer name="–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è">
                <div className={styles.profileContainer}>
                    <div className={styles.errorState}>
                        <div className={styles.errorIcon}>‚ö†Ô∏è</div>
                        <h3>–û—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏</h3>
                        <p>–°–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ store. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Redux.</p>
                        <p>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–ª—é—á–∏: {Object.keys(storeState).join(', ')}</p>
                    </div>
                </div>
            </FullScreenToolContainer>
        );
    }

    // –î–∞–Ω–Ω—ã–µ –∏–∑ Redux store —Å –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –¥–µ—Å—Ç—Ä—É–∫—Ç—É—Ä–∏–∑–∞—Ü–∏–µ–π
    const profileState = useSelector(store => store.profile || {});
    const {
        userTasks: tasks = [],
        taskStatistics = {total: 0, completed: 0, pending: 0},
        isLoadingTasks = false,
        tasksError = null
    } = profileState;

    // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    useEffect(() => {
        console.log('Profile component mounted, dispatching fetchUserTasksRequest...');
        console.log('Dispatch function:', dispatch);
        console.log('fetchUserTasksRequest:', fetchUserTasksRequest);

        const action = fetchUserTasksRequest();
        console.log('Created action:', action);

        dispatch(action);
        console.log('Action dispatched');

        // –í—Ä–µ–º–µ–Ω–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ - –∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é –≤ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç
        console.log('Making direct API call and setting local state...');

        const loadTasksDirectly = async () => {
            try {
                const response = await fetch(`${import.meta.env.VITE_BACKEND_HOST}/profile/tasks`, {
                    headers: {
                        'Authorization': `Bearer ${storeState.auth?.accessToken}`,
                        'Content-Type': 'application/json',
                    }
                });

                console.log('Direct API response status:', response.status);

                if (response.ok) {
                    const data = await response.json();
                    console.log('Direct API response data:', data);
                    console.log('Direct API data type:', typeof data, 'Is array:', Array.isArray(data));

                    // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º SUCCESS —ç–∫—à–µ–Ω —Å –¥–∞–Ω–Ω—ã–º–∏
                    if (Array.isArray(data) && data.length > 0) {
                        console.log('Forcing SUCCESS action with data:', data);
                        dispatch({
                            type: 'FETCH_USER_TASKS_SUCCESS',
                            payload: data
                        });
                    }
                } else {
                    console.error('Direct API error status:', response.status);
                }
            } catch (error) {
                console.error('Direct API error:', error);
            }
        };

        loadTasksDirectly();
    }, [dispatch, storeState.auth?.accessToken]);

    // –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    useEffect(() => {
        console.log('Profile state:', profileState);
        console.log('Tasks:', tasks);
        console.log('Statistics:', taskStatistics);
        console.log('Is loading:', isLoadingTasks);
        console.log('Error:', tasksError);
    }, [profileState, tasks, taskStatistics, isLoadingTasks, tasksError]);

    // –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–¥–∞—á –Ω–∞ –∫–ª–∏–µ–Ω—Ç–µ
    const filteredAndSortedTasks = tasks
        .filter(task => {
            if (filter === 'completed') return task.status === true;
            if (filter === 'pending') return task.status === false;
            return true; // all - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –í–°–ï –∑–∞–¥–∞—á–∏ –±–µ–∑ –∏—Å–∫–ª—é—á–µ–Ω–∏—è
        })
        .sort((a, b) => {
            // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ ID (–±–æ–ª—å—à–∏–π ID = –±–æ–ª–µ–µ –Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞)
            return b.id - a.id;
        });

    console.log('Filtered and sorted tasks:', filteredAndSortedTasks);
    console.log('Total tasks to display:', filteredAndSortedTasks.length);

    // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–∑ Redux –∏–ª–∏ –≤—ã—á–∏—Å–ª–µ–Ω–Ω–∞—è –∏–∑ –∑–∞–¥–∞—á
    const totalTasks = taskStatistics.total || tasks.length;
    const completedTasks = taskStatistics.completed || tasks.filter(task => task.status === true).length;
    const pendingTasks = taskStatistics.pending || (totalTasks - completedTasks);

    const handleDeleteTask = (taskId) => {
        if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç—É –∑–∞–¥–∞—á—É?')) {
            dispatch(deleteUserTaskRequest(taskId));
        }
    };

    const handleRefresh = () => {
        console.log('Refreshing tasks...');
        dispatch(fetchUserTasksRequest());
    };

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
    if (isLoadingTasks) {
        return (
            <FullScreenToolContainer name="–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è">
                <div className={styles.profileContainer}>
                    <div className={styles.loadingState}>
                        <div className={styles.loadingIcon}>‚è≥</div>
                        <p>–ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á...</p>
                    </div>
                </div>
            </FullScreenToolContainer>
        );
    }

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É
    if (tasksError) {
        return (
            <FullScreenToolContainer name="–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è">
                <div className={styles.profileContainer}>
                    <div className={styles.errorState}>
                        <div className={styles.errorIcon}>‚ùå</div>
                        <h3>–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏</h3>
                        <p>{tasksError}</p>
                        <button
                            onClick={handleRefresh}
                            className={styles.retryButton}
                        >
                            –ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                        </button>
                    </div>
                </div>
            </FullScreenToolContainer>
        );
    }

    return (
        <FullScreenToolContainer name="–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è">
            <div className={styles.profileContainer}>
                {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∫–Ω–æ–ø–∫–æ–π –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è */}
                <div className={styles.profileHeader}>
                    <h2 className={styles.profileTitle}>–ú–æ–∏ –∑–∞–¥–∞—á–∏</h2>
                    <button
                        onClick={handleRefresh}
                        className={styles.refreshButton}
                        disabled={isLoadingTasks}
                    >
                        üîÑ –û–±–Ω–æ–≤–∏—Ç—å
                    </button>
                </div>

                {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
                <div className={styles.statsContainer}>
                    <div className={styles.statCard}>
                        <div className={styles.statIcon}>üìù</div>
                        <div className={styles.statInfo}>
                            <span className={styles.statNumber}>{totalTasks}</span>
                            <span className={styles.statLabel}>–í—Å–µ–≥–æ –∑–∞–¥–∞—á</span>
                        </div>
                    </div>
                    <div className={styles.statCard}>
                        <div className={styles.statIcon}>‚úÖ</div>
                        <div className={styles.statInfo}>
                            <span className={styles.statNumber}>{completedTasks}</span>
                            <span className={styles.statLabel}>–ó–∞–≤–µ—Ä—à–µ–Ω–æ</span>
                        </div>
                    </div>
                    <div className={styles.statCard}>
                        <div className={styles.statIcon}>‚è≥</div>
                        <div className={styles.statInfo}>
                            <span className={styles.statNumber}>{pendingTasks}</span>
                            <span className={styles.statLabel}>–í –ø—Ä–æ—Ü–µ—Å—Å–µ</span>
                        </div>
                    </div>
                </div>

                {/* –§–∏–ª—å—Ç—Ä—ã */}
                <div className={styles.filterContainer}>
                    <div className={styles.filterButtons}>
                        <button
                            className={`${styles.filterButton} ${filter === 'all' ? styles.active : ''}`}
                            onClick={() => setFilter('all')}
                        >
                            –í—Å–µ –∑–∞–¥–∞—á–∏ ({totalTasks})
                        </button>
                        <button
                            className={`${styles.filterButton} ${filter === 'completed' ? styles.active : ''}`}
                            onClick={() => setFilter('completed')}
                        >
                            –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ ({completedTasks})
                        </button>
                        <button
                            className={`${styles.filterButton} ${filter === 'pending' ? styles.active : ''}`}
                            onClick={() => setFilter('pending')}
                        >
                            –í –ø—Ä–æ—Ü–µ—Å—Å–µ ({pendingTasks})
                        </button>
                    </div>
                </div>

                {/* –¢–∞–±–ª–∏—Ü–∞ –∑–∞–¥–∞—á - –≤—ã–≤–æ–¥–∏–º –í–°–ï –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON */}
                <div className={styles.tasksContainer}>
                    <div className={styles.debugInfo}>
                        <p>–í—Å–µ–≥–æ –∑–∞–¥–∞—á –≤ –º–∞—Å—Å–∏–≤–µ: {tasks.length}</p>
                        <p>–û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è: {filteredAndSortedTasks.length}</p>
                        <p>–¢–µ–∫—É—â–∏–π —Ñ–∏–ª—å—Ç—Ä: {filter}</p>
                    </div>

                    {filteredAndSortedTasks.length === 0 ? (
                        <div className={styles.emptyState}>
                            <div className={styles.emptyIcon}>üì≠</div>
                            <h3>–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è</h3>
                            <p>–í—Å–µ–≥–æ –ø–æ–ª—É—á–µ–Ω–æ –∑–∞–¥–∞—á: {tasks.length}</p>
                            <p>–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ</p>
                            <button
                                onClick={() => {
                                    console.log('Raw tasks data:', tasks);
                                    console.log('Profile state:', profileState);
                                }}
                                className={styles.debugButton}
                            >
                                üîç –û—Ç–ª–∞–¥–∫–∞ –≤ –∫–æ–Ω—Å–æ–ª–∏
                            </button>
                        </div>
                    ) : (
                        <div className={styles.tableContainer}>
                            <table className={styles.tasksTable}>
                                <thead>
                                <tr>
                                    <th>ID</th>
                                    <th>–ù–∞–∑–≤–∞–Ω–∏–µ</th>
                                    <th>–û–ø–∏—Å–∞–Ω–∏–µ</th>
                                    <th>–°—Ç–∞—Ç—É—Å</th>
                                    <th>–í—Ä–µ–º—è (–º–∏–Ω)</th>
                                    <th>–§–∞–π–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞</th>
                                    <th>–î–µ–π—Å—Ç–≤–∏—è</th>
                                </tr>
                                </thead>
                                <tbody>
                                {filteredAndSortedTasks.map((task, index) => (
                                    <tr key={`${task.id}-${index}`} className={styles.tableRow}>
                                        <td className={styles.idCell}>#{task.id}</td>
                                        <td className={styles.nameCell}>
                                            <div className={styles.taskName}>{task.name || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è'}</div>
                                        </td>
                                        <td className={styles.descriptionCell}>
                                            <div className={styles.taskDescription}>
                                                {task.description || '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è'}
                                            </div>
                                        </td>
                                        <td className={styles.statusCell}>
                                                <span
                                                    className={`${styles.statusBadge} ${task.status ? styles.statusCompleted : styles.statusPending}`}>
                                                    {task.status ? '‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ' : '‚è≥ –í –ø—Ä–æ—Ü–µ—Å—Å–µ'}
                                                </span>
                                        </td>
                                        <td className={styles.timeCell}>{task.estimated_time || 0}</td>
                                        <td className={styles.fileCell}>
                                            {task.status && task.doc_path ? (
                                                <a
                                                    href={task.doc_path}
                                                    target="_blank"
                                                    rel="noopener noreferrer"
                                                    className={styles.downloadLink}
                                                >
                                                    üìÑ –°–∫–∞—á–∞—Ç—å
                                                </a>
                                            ) : (
                                                <span className={styles.noFile}>‚Äî</span>
                                            )}
                                        </td>
                                        <td className={styles.actionsCell}>
                                            <button
                                                onClick={() => handleDeleteTask(task.id)}
                                                className={styles.deleteButton}
                                                title="–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É"
                                            >
                                                üóëÔ∏è
                                            </button>
                                        </td>
                                    </tr>
                                ))}
                                </tbody>
                            </table>
                        </div>
                    )}
                </div>

                {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ—Å–ª–µ–¥–Ω–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ */}
                {tasks.length > 0 && (
                    <div className={styles.lastUpdated}>
                        <small>
                            –ü–æ–∫–∞–∑–∞–Ω–æ {filteredAndSortedTasks.length} –∏–∑ {totalTasks} –∑–∞–¥–∞—á
                            {profileState.lastUpdated && (
                                <> ‚Ä¢ –û–±–Ω–æ–≤–ª–µ–Ω–æ: {new Date(profileState.lastUpdated).toLocaleString('ru-RU')}</>
                            )}
                        </small>
                    </div>
                )}
            </div>
        </FullScreenToolContainer>
    );
};